@startuml
(*) -->[user creates PVC] "PVC exists"
-->[PV controller checks storage class and existing PVs, sets the\nvolume.beta.kubernetes.io/storage-provisioner annotation] "PVC ready for provisioning" as PVC_READY
--> ==B1==

==B1== -->[immediate binding] "CreateVolume for all nodes" as CREATE_VOLUME_ALL
  -->[failure] "PVC_READY"
  CREATE_VOLUME_ALL -->[success] ==B2==

==B1== -->[late binding] "wait for pod" as POD
  -->[scheduler tentatively chooses a node for a pod\nwhich uses the volume and sets the\nvolume.beta.kubernetes.io/selected-node annotation] "PVC with selected node ready for provisioning" as PVC_READY_SELECTED
  --> "CreateVolume for selected node" as CREATE_VOLUME_SELECTED
  -->[ResourceExhausted:\nexternal-provisioner unsets the\nselected-node annotation] "POD"
  CREATE_VOLUME_SELECTED -->[failure] "PVC_READY_SELECTED"
  CREATE_VOLUME_SELECTED -->[success] ==B2==

==B2== --> "volume exists" as VOLUME_EXISTS
-->[external-provisioner creates PV] "PV ready for binding"
-->[PV controller sets 'PV.Status.Phase: Bound'] "PV bound"
-->[PV controller sets\npv.kubernetes.io/bind-completed: yes\npv.kubernetes.io/bound-by-controller: yes\n'PVC.Spec.VolumeName'] "PVC almost bound"
-->[PV controller sets 'PVC.Status.Phase: Bound'\nand 'PVC.Status.Capacity'] "PVC bound"
-->[user deletes PVC] "PVC marked for deletion"
-->[PVC protection controller determines that\nPVC is not in use] "PVC deleted, PV orphaned" as VOLUME_READY_FOR_DELETION
--> "DeleteVolume"
DeleteVolume -->[failure] VOLUME_READY_FOR_DELETION
DeleteVolume -->[success] "volume deleted"
-->[external-provisioner set 'PV.Status.Phase: Released'] "PV ready for deletion" as PV_READY_FOR_DELETION
-->[external-provisioner deletes PV] "PV marked for deletion"
-->[PV controller determines that\nPV has no volume] "PV deleted"
--> (*)
@enduml
