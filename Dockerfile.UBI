# Image for building PMEM-CSI.
# Image #0 as build
FROM registry.access.redhat.com/ubi8/ubi-minimal

WORKDIR /pmem-csi
COPY . .

ARG GO_VERSION="1.15.2"

# CACHEBUST is set by the CI when building releases to ensure that apt-get really gets
# run instead of just using some older, cached result.
ARG CACHEBUST

RUN microdnf install -y gcc ndctl-devel make git pkg-config curl tar findutils xz
RUN curl -L https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz | tar -zxf - -C / && \
    mkdir -p /usr/local/bin/ && \
    for i in /go/bin/*; do ln -s $i /usr/local/bin/; done

# build pmem-csi-driver
ARG VERSION="unknown"
ENV PKG_CONFIG_PATH=/usr/lib/pkgconfig/

# Here we choose explicitly which binaries we want in the image and in
# which flavor (production or testing). The actual binary name in the
# image is going to be the same, to avoid unnecessary deployment
# differences.
RUN set -x && \
    make VERSION=${VERSION} pmem-csi-driver pmem-csi-operator && \
    mkdir -p /usr/local/bin && \
    mv _output/pmem-csi-driver /usr/local/bin/pmem-csi-driver && \
    mv _output/pmem-csi-operator /usr/local/bin/pmem-csi-operator && \
    mkdir -p /usr/local/share/package-licenses && \
    go mod vendor && \
    hack/copy-modules-license.sh /usr/local/share/package-licenses ./cmd/pmem-csi-driver ./cmd/pmem-csi-operator && \
    cp /go/LICENSE /usr/local/share/package-licenses/go.LICENSE && \
    cp LICENSE /usr/local/share/package-licenses/PMEM-CSI.LICENSE

# Now also copy copyleft source code that was used during the build of our binaries.
RUN set -x && \
    mkdir -p /usr/local/share/package-sources && \
    for license in $(grep -l -r -w -e MPL -e GPL -e LGPL /usr/local/share/package-licenses | sed -e 's;^/usr/local/share/package-licenses/;;'); do \
        if ! (dir=$(dirname $license) && \
              tar -Jvcf /usr/local/share/package-sources/$(echo $dir | tr / _).tar.xz vendor/$dir ); then \
              exit 1; \
        fi; \
    done; \
    ls -l /usr/local/share/package-sources; \
    du -h /usr/local/share/package-sources

# The actual pmem-csi-driver image.
# Image #1 as runtime
FROM registry.access.redhat.com/ubi8/ubi-minimal
LABEL name="pmem-csi-driver"
LABEL vendor="Intel"
LABEL version="0.8.0"
# Needs to be set by Red Hat build service.
# LABEL release="1"
LABEL summary="A CSI driver for manager PMEM."
LABEL description="Intel(R) PMEM-CSI is a Container Storage Interface (CSI) driver for container orchestrators like Kubernetes. It makes local persistent memory (PMEM) available as a filesystem volume to container applications."

# Update and install the minimal amount of additional packages that
# are needed at runtime:
# file - driver uses file utility to determine filesystem type
# xfsprogs, e2fsprogs - formating filesystems
# lvm2 - volume management
# ndctl - pulls in the necessary library, useful by itself
RUN microdnf install file xfsprogs e2fsprogs lvm2 ndctl

# Move required binaries and libraries to clean container.
COPY --from=0 /usr/local/bin/pmem-* /usr/local/bin/
COPY --from=0 /usr/local/share/package-licenses /licenses
COPY --from=0 /usr/local/share/package-sources /sources

RUN cat /etc/lvm/lvm.conf

# Don't rely on udevd, it isn't available (https://unix.stackexchange.com/questions/591724/how-to-add-a-block-to-udev-database-that-works-after-reboot).
# Same with D-Bus.
# Backup and archival of metadata inside the container is useless.
RUN sed -i \
        -e 's/udev_sync = 1/udev_sync = 0/' \
        -e 's/udev_rules = 1/udev_rules = 0/' \
        -e 's/obtain_device_list_from_udev = 1/obtain_device_list_from_udev = 0/' \
        -e 's/multipath_component_detection = 1/multipath_component_detection = 0/' \
        -e 's/md_component_detection = 1/md_component_detection = 0/' \
        -e 's/notify_dbus = 1/notify_dbus = 0/' \
        -e 's/backup = 1/backup = 0/' \
        -e 's/archive = 1/archive = 0/' \
        /etc/lvm/lvm.conf

ENV LD_LIBRARY_PATH=/usr/lib
# By default container runs with non-root user
# Choose root user explicitly only where needed, like - node driver
RUN useradd --uid 1000 --user-group --shell /bin/bash pmem-csi
USER 1000
